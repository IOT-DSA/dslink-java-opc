apply plugin: 'application'
apply plugin: 'findbugs'
apply plugin: 'java'

mainClassName = 'opc.Main'
sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '0.2.16-SNAPSHOT'

repositories {
	flatDir { dirs 'lib' }
    mavenCentral()
    maven {
    	url '.m2/repository'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}


dependencies {

    compile 'org.iot-dsa:dslink:0.17.4-SNAPSHOT'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile ':org.openscada.external:1+'
    compile ':org.openscada.external.jcifs:1+'
    compile ':org.openscada.external.sdk:1+'
    compile ':org.openscada.jinterop:1+'
    compile ':org.openscada.jinterop.core:2+'
    compile ':org.openscada.jinterop.deps:1+'
    compile ':org.openscada.jinterop.sdk:1+'
    compile ':org.openscada.opc.dcom:1+'
    compile ':org.openscada.opc.lib:1+'
    compile ':org.openscada.opc.xmlda:1+'
    compile ':org.openscada.utgard:1+'
    compile ':org.openscada.utgard.sdk:1+'
    compile 'org.eclipse.scada.utils:org.eclipse.scada.utils:0.3.0-SNAPSHOT'
}


run {
    args System.getProperty("exec.args", "").split()
    workingDir project.buildDir
}


tasks.withType(FindBugs) {
	//classes = classes.filter {
    //    !it.path.contains(new File('com/serotonin').path)
    //}
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

applicationDistribution.from new File(project.projectDir, "dslink.json")
